" Auto-add plug

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"Using https://blog.hellojs.org/configure-vim-from-scratch-efe6cbc1c563
"
" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" https://vimawesome.com

Plug 'tomtom/tcomment_vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'itchyny/lightline.vim'
Plug 'sheerun/vim-polyglot'
Plug 'editorconfig/editorconfig-vim'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'vimwiki/vimwiki'
Plug 'plasticboy/vim-markdown'
Plug 'airblade/vim-gitgutter'
Plug 'mattn/calendar-vim'

"Plug 'fholgado/minibufexpl.vim'

" Colors
Plug 'altercation/vim-colors-solarized'
Plug 'vim-scripts/xoria256.vim'
Plug 'sjl/badwolf'
Plug 'flazz/vim-colorschemes'
Plug 'srcery-colors/srcery-vim'
Plug 'bignimbus/pop-punk.vim'
Plug 'jaredgorski/spacecamp'
Plug 'cocopon/iceberg.vim'
Plug 'letorbi/vim-colors-modern-borland'

" Have to install both fzf and fzf.vim
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Misc
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'

" HTML
Plug 'mattn/emmet-vim'
Plug 'evanleck/vim-svelte', {'branch': 'main'}

" Syntax
Plug 'ibab/vim-snakemake'
Plug 'leafgarland/typescript-vim'
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' }
Plug 'JuliaEditorSupport/julia-vim'

" Typescript
Plug 'Quramy/tsuquyomi'

" Rust
Plug 'racer-rust/vim-racer'
Plug 'rust-lang/rust.vim'
"Plug 'w0rp/ale'

" tmux
Plug 'christoomey/vim-tmux-navigator'

" javascript etc formatting
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

" Python stuff
" Looks like python-mode needs a vim with python compiled in
"Plug 'python-mode/python-mode', { 'branch': 'develop' }
"Plug 'vim-syntastic/syntastic'
" Seems like on debian, python2, etc, this is tricky
"Plug 'python-rope/ropevim'
Plug 'psf/black'


" Termux
Plug 'benmills/vimux'

" TaskWarrior
"Plug 'tools-life/taskwiki'

" Nerd Font Stuff
Plug 'ryanoasis/vim-devicons'

"  You will load your plugin here
"  Make sure you use single quotes
" Initialize plugin system
call plug#end()

let mapleader = ','

" absolute width of netrw window
let g:netrw_winsize = -28

" tree-view
let g:netrw_liststyle = 3

" sort is affecting only: directories on the top, files below
let g:netrw_sort_sequence = '[\/]$,*'

" open file in previous window
let g:netrw_browse_split = 4

let g:netrw_banner = 0
let g:netrw_altv = 1

" svelte options
let g:svelte_indent_script = 0
let g:svelte_indent_style = 0
autocmd FileType svelte :EmmetInstall
autocmd FileType markdown :EmmetInstall

" Leader C is the prefix for code related mapp√Ængs 
noremap <silent> <Leader>cc :TComment<CR>

" Leader F is for file related mapp√Ængs (open, browse...) 
nnoremap <silent> <Leader>f :CtrlP<CR>
nnoremap <silent> <Leader>fm :CtrlPMRU<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ctrl B for buffer related mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cycle between buffer
nnoremap <silent> <Leader>b :CtrlPBuffer<CR> 
"create (N)ew buffer
nnoremap <silent> <Leader>bb :bn<CR>
"(D)elete the current buffer
nnoremap <silent> <Leader>bd :bdelete<CR> 
"(U)nload the current buffer
nnoremap <silent> <Leader>bu :bunload<CR> 
" (L)ock the current buffer"
nnoremap <silent> <Leader>bl :setnomodifiable<CR> 

set background=dark
"colorscheme xoria256
"colorscheme badwolf
colorscheme Monokai
"colorscheme spacecamp
"colorscheme spacecamp_lite
colorscheme iceberg

" reloads .vimrc -- making all changes active
map <silent> <Leader>v :source ~/.vimrc<CR>:PlugInstall<CR>:bdelete<CR>:exe ":echo 'vimrc reloaded'"<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Lightline

" https://github.com/itchyny/lightline.vim
let g:lightline = { 
                        \ 'colorscheme': 'seoul256', 
                        \ 'active': {
                        \       'left': [[ 'mode', 'paste' ],
                        \                [ 'gitbranch', 'syntastic', 'readonly', 'filename', 'modified'] ]
                        \ },
                        \ 'component_function' : {
                        \       'gitbranch': 'FugitiveStatusline',
                        \ },
                        \ }
"                        \       'syntastic': 'SyntasticStatuslineFlag'
set laststatus=2                                 " vim-lightline
set noshowmode                                   " vim-lightline

"set statusline+=%{FugitiveStatusline()}
"set statusline+=%#warningmsg#                                   "syntastic
"set statusline+=%{SyntasticStatuslineFlag()}                    "syntastic
"set statusline+=%*                                              "syntastic

"let g:syntastic_always_populate_loc_list = 1                    "syntastic
"let g:syntastic_auto_loc_list = 1                               "syntastic
"let g:syntastic_check_on_open = 1                               "syntastic
"let g:syntastic_check_on_wq = 0                                 "syntastic

vnoremap <silent> <Leader>cee    :Tabularize /=<CR>
vnoremap <silent> <Leader>cet    :Tabularize /#<CR>
vnoremap <silent> <Leader>ce     :Tabularize /

" make backspaces delete sensibly
set backspace=indent,eol,start

set smartcase
set ignorecase

set backupdir=~/.vim/tmp/                   " for the backup files
set directory=~/.vim/tmp/                   " for the swap files

" Let's turn on some highlight searching

 set t_kb=
 set t_kD=[3~
 set hls
 set is
map <leader>H <Esc>:nohl<cr>

map <leader>oc :w !xclip<cr>
map <leader>op :r!xclip -o<cr>

" Turn on relative numbering, but make it easy to switch around

set number
set relativenumber
map <leader>rn :set invrelativenumber<CR>
map <leader>rN :set invnumber<CR>

map <silent>,h <C-w>h
map <silent>,j <C-w>j
map <silent>,k <C-w>k
map <silent>,l <C-w>l

" Hate the beeping!
set visualbell

map <leader>ct "=strftime("%c")<CR>P
map <leader>cd "=strftime("%Y-%m-%d")<CR>P
"
" Default gitgutter arguments
nmap ]c <Plug>GitGutterNextHunk
nmap [c <Plug>GitGutterPrevHunk
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterUndoHunk
" Set up some highlights here -- default is invisible!
"highlight link GitGutterAdd DiffAdd
"highlight link GitGutterDelete DiffDelete
"highlight link GitGutterChange DiffChange
highlight GitGutterAdd    ctermfg=2
highlight GitGutterChange ctermfg=3
highlight GitGutterDelete ctermfg=1 

" NERDTree - map ctrl-O

map <C-o> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable="+"
let g:NERDTreeDirArrowCollapsible="v"

" Fuzzy-finding

map ; :Files<CR>

" Tabs: https://vim.fandom.com/wiki/Using_tab_pages

" This seems to work to have ctrl-arrows move left and right, but there is
" disagreeing info that suggests one should use other ways of specifying them.

nnoremap <ESC>[C :tabprevious<CR>
nnoremap <ESC>[D :tabnext<CR>

" Some vimwiki tips from https://blog.mague.com/?p=602

" vimwiki stuff "
" Run multiple wikis " -- disabled here
"let g:vimwiki_list = [
"                        \{'path': '~/Documents/VimWiki/personal.wiki'},
"                        \{'path': '~/Documents/VimWiki/tech.wiki'}
"                \]
let g:vimwiki_global_ext=0
au BufRead,BufNewFile *.wiki set filetype=vimwiki
autocmd FileType vimwiki map <Leader>d :VimwikiMakeDiaryNote<CR>
function! ToggleCalendar()
  execute ":Calendar"
  if exists("g:calendar_open")
    if g:calendar_open == 1
      execute "q"
      unlet g:calendar_open
    else
      g:calendar_open = 1
    end
  else
    let g:calendar_open = 1
  end
endfunction
autocmd FileType vimwiki map <Leader>c :call ToggleCalendar()<CR>

" Emmet stuff: https://github.com/mattn/emmet-vim
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
autocmd FileType markdown EmmetInstall

" Some nice globals.  Always tab 4 spaces.
set expandtab
set tabstop=4
set shiftwidth=4

" This is based on:
" https://medium.com/@rajasekar3eg/rust-for-python-developers-environment-setup-6752315a61bd
" 
" rustup commands:
" 
"   rustup component add rustfmt
"   rustup component add rls rust-analysis rust-src
"   cargo +nightly install racer

let g:racer_cmd = "~/.cargo/bin/racer" 
let g:racer_experimental_completer = 1
"let g:ale_python_auto_pipenv=1
"let b:ale_linters = {
 "\ 'rust': ['rustup', 'run', 'nightly', 'rls'],
 "\ }"

" Racer commands

" Note also that racer maps C-x C-o to the smart autocomplete

au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)

" tmux navigator
"
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" Some options for YCM
" http://ycm-core.github.io/YouCompleteMe/#options
let g:ycm_filetype_whitelist = {'typescript': 1}
"set completeopt-=preview
"let g:ycm_add_preview_to_completeopt = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1

" Set markdown stuff

autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd FileType markdown setlocal spell spelllang=en_us
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_fenced_languages=['python=python', 'bash=sh', 'javascript=javascript']

au BufRead,BufNewFile *.pxi set filetype=pyrex

noremap <silent> <Leader>bb :Black<CR>
au BufRead,BufNewFile *.ksy set filetype=yaml

" MiniBufExplorer
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplMapWindowNavArrows = 1
"let g:miniBufExplMapCTabSwitchBufs = 1
"let g:miniBufExplModSelTarget = 1
"let g:miniBufExplVSplit = 20
"let g:miniBufExplBRSplit = 1
"noremap <silent> <Leader>mb :MBEToggle<cr>

" https://www.mcclimon.org/blog/bibkeys/
" A function to complete keys from a BibTeX file. Shells out
" to 'bibkeys' (see github.com/mmcclimon/bibkeys) to get a list
function! CompleteBibKeys(findstart, base)
    if a:findstart
        " locate the start of the word
        let line = getline(".")
        let start = col(".") - 1
        echom line[start - 1]
        while start > 0 && line[start - 1] =~ "[A-Za-z:]"
            let start -=1
        endwhile
        return start
    else
        " find months matching a:base
        let keys = systemlist('bibkeys -1')
        let res = []

        " bibkeys didn't return anything useful
        if v:shell_error
            return []
        endif

        for key in keys
            if key =~ '^' . a:base
                call add(res, key)
            endif
        endfor

        return res
    endif
endfunction

au Filetype tex set omnifunc=CompleteBibKeys

autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path %

" I type :W way too often, and want to have it "write" rather than call the
" fzf Windows command.
command W write

" enzo names its files .C
au BufRead,BufNewFile *.C set filetype=cpp

" https://vi.stackexchange.com/questions/475/how-to-save-a-file-for-which-i-have-no-write-permissions
" 'Super duper write this, for real!!'
cnoremap w!! w !sudo tee %
